///solved

#include <bits/stdc++.h>
#define ll long long
using namespace std;
bool status[4390859];
ll prime[4390859];
ll ara[1000009];
 ll p=0;
void siv()
{

    status[1]=1;
    status[0]=1;
    ll M=4390855;
     for(ll i=2;i<=M;i++){
        if(status[i]==false){
            prime[p]=i;
            for(int j=2*i;j<=M;j=j+i){
                status[j]=true;
            }
            p++;
        }
    }
}
ll go(ll x)
{
    ll sod=1;
    for(int i=0;prime[i]*prime[i]<=x;i++)
    {
        if(x%prime[i]==0)
        {
            ll gun=prime[i];
            while(x%prime[i]==0){
                gun=gun*prime[i];
                x=x/prime[i];
            }
            sod*=((gun-1)/(prime[i]-1));

        }
    }
    if(x>1)
    {
        sod*=((x*x -1)/(x-1));
    }
    return sod;
}
int main()
{
    siv();
    ara[2]=1;
    /// I checked first manually. I got that some(not all) perfect squares  have prime SOD(sum of divisors).
    /// except 2.
    /// I also checked manually the highest SOD of any number that is 4390853.
    ///so I apply sieve method only up to  4390855.
    for(ll i=2;i*i<=1000000;i++)
    {
       ll take=go(i*i);
       if(status[take]==0)ara[i*i]=1;
    }
    for(int i=1;i<=1000000;i++){
        ara[i]+=ara[i-1];
    }
    ll t,x,y;scanf("%lld",&t);
    while(t--)
    {
        scanf("%lld %lld",&x,&y);
        printf("%lld\n",ara[y]-ara[x-1]);
    }
    return 0;
}
